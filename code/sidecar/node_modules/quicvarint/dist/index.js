var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  MAX: () => MAX,
  MIN: () => MIN,
  decode: () => decode,
  encode: () => encode,
  length: () => length,
  read: () => read
});
module.exports = __toCommonJS(index_exports);
var MAX_VARINT_1 = 63;
var MAX_VARINT_2 = 16383;
var MAX_VARINT_4 = 1073741823;
var MAX_VARINT_8 = 2147483647;
var MIN = 0;
var MAX = MAX_VARINT_8;
var PREFIX_MASK = 63;
var read = (input, offset) => {
  const b = input.getUint8(offset);
  offset += 1;
  const prefix = b >> 6;
  const length2 = 1 << prefix;
  let v = b & PREFIX_MASK;
  for (let i = 0; i < length2 - 1; i += 1) {
    v = (v << 8) + input.getUint8(offset);
    offset += 1;
  }
  return { value: v, usize: length2 };
};
var decode = (input) => {
  if (input.length === 0) {
    throw new Error("There should be bytes in the array");
  }
  const prefix = input[0] >> 6;
  switch (prefix) {
    case 0: {
      const value = input[0] & PREFIX_MASK;
      return { value, usize: 1 };
    }
    case 1: {
      if (input.length < 2) {
        throw new Error("There should be 2 bytes or more in the array");
      }
      const value = (input[0] & PREFIX_MASK) << 8 | input[1];
      return { value, usize: 2 };
    }
    case 2: {
      if (input.length < 4) {
        throw new Error("There should be 4 bytes or more in the array");
      }
      const value = (input[0] & PREFIX_MASK) << 24 | input[1] << 16 | input[2] << 8 | input[3];
      return { value, usize: 4 };
    }
    case 3: {
      if (input.length < 8) {
        throw new Error("There should be 8 bytes or more in the array");
      }
      if ((input[0] & PREFIX_MASK) !== 0 || input[1] !== 0 || input[2] !== 0 || input[3] !== 0) {
        throw new Error(`Cannot decode number greater than ${MAX}`);
      }
      const value = input[4] << 24 | input[5] << 16 | input[6] << 8 | input[7];
      return { value, usize: 8 };
    }
  }
  throw new Error("Invalid prefix");
};
var encode = (n, len = length(n)) => {
  if (n > MAX) {
    throw new Error("Number is too big");
  }
  const bytes = new Uint8Array(len);
  const BYTE = 255;
  switch (len) {
    case 1:
      bytes[0] = 0 | n & PREFIX_MASK;
      break;
    case 2:
      bytes[0] = 64 | n >> 8 & PREFIX_MASK;
      bytes[1] = n & BYTE;
      break;
    case 4:
      bytes[0] = 128 | n >> 24 & PREFIX_MASK;
      bytes[1] = n >> 16 & BYTE;
      bytes[2] = n >> 8 & BYTE;
      bytes[3] = n & BYTE;
      break;
    case 8:
      bytes[0] = 192;
      bytes[4] = n >> 24 & BYTE;
      bytes[5] = n >> 16 & BYTE;
      bytes[6] = n >> 8 & BYTE;
      bytes[7] = n & BYTE;
      break;
    default:
      throw new Error("Invalid length");
  }
  return bytes;
};
var length = (n) => {
  if (n < MIN) {
    throw new Error("Cannot encode negative numbers");
  }
  if (n > MAX) {
    throw new Error("Number is too big");
  }
  if (n > MAX_VARINT_4) {
    return 8;
  }
  if (n > MAX_VARINT_2) {
    return 4;
  }
  if (n > MAX_VARINT_1) {
    return 2;
  }
  return 1;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MAX,
  MIN,
  decode,
  encode,
  length,
  read
});
