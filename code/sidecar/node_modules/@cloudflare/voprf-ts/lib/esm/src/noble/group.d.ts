import { type Deserializer, type Group, type GroupID } from '../groupTypes.js';
import type { GroupParams } from './types.js';
import { ScalarNb } from './scalar.js';
import { EltNb } from './element.js';
export declare class GroupNb implements Group {
    #private;
    static readonly supportedGroups: GroupID[];
    static get(gid: GroupID): Group;
    readonly params: GroupParams;
    readonly id: GroupID;
    constructor(gid: GroupID);
    bytesToNumber(bytes: Uint8Array): bigint;
    newScalar(): ScalarNb;
    newElt(): EltNb;
    identity(): EltNb;
    generator(): EltNb;
    mulGen(s: ScalarNb): EltNb;
    randomScalar(): Promise<ScalarNb>;
    hashToGroup(msg: Uint8Array, dst: Uint8Array): Promise<EltNb>;
    hashToScalar(msg: Uint8Array, dst: Uint8Array): Promise<ScalarNb>;
    readonly eltDes: Deserializer<EltNb>;
    readonly scalarDes: Deserializer<ScalarNb>;
    desElt(bytes: Uint8Array): EltNb;
    desScalar(bytes: Uint8Array): ScalarNb;
    eltSize(compressed?: boolean): number;
    scalarSize(): number;
}
//# sourceMappingURL=group.d.ts.map