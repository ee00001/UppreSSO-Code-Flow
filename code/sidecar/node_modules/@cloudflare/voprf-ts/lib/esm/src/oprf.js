// Copyright (c) 2021 Cloudflare, Inc. and contributors.
// Copyright (c) 2021 Cloudflare, Inc.
// Licensed under the BSD-3-Clause license found in the LICENSE file or
// at https://opensource.org/licenses/BSD-3-Clause
import { DLEQProof } from './dleq.js';
import { GROUP } from './groupTypes.js';
import { fromU16LenPrefixDes, fromU16LenPrefixUint8Array, joinAll, toU16LenPrefix, toU16LenPrefixClass, toU16LenPrefixUint8Array } from './util.js';
import { LABELS, MODE, SUITE } from './consts.js';
import { getCrypto, getSuiteGroup, getCryptoProvider, setCryptoProvider } from './cryptoImpl.js';
function assertNever(name, x) {
    throw new Error(`unexpected ${name} identifier: ${x}`);
}
export function getOprfParams(id) {
    switch (id) {
        case Oprf.Suite.P256_SHA256:
            return [Oprf.Suite.P256_SHA256, GROUP.P256, 'SHA-256', 32];
        case Oprf.Suite.P384_SHA384:
            return [Oprf.Suite.P384_SHA384, GROUP.P384, 'SHA-384', 48];
        case Oprf.Suite.P521_SHA512:
            return [Oprf.Suite.P521_SHA512, GROUP.P521, 'SHA-512', 64];
        case Oprf.Suite.RISTRETTO255_SHA512:
            return [Oprf.Suite.RISTRETTO255_SHA512, GROUP.RISTRETTO255, 'SHA-512', 64];
        case Oprf.Suite.DECAF448_SHAKE256:
            return [Oprf.Suite.DECAF448_SHAKE256, GROUP.DECAF448, 'SHAKE256', 64];
        default:
            assertNever('Oprf.Suite', id);
    }
}
// testing helper
export function getSupportedSuites(g) {
    return Object.values(Oprf.Suite).filter((v) => g.supportedGroups.includes(getOprfParams(v)[1]));
}
export class Oprf {
    static set Crypto(provider) {
        setCryptoProvider(provider);
    }
    static get Crypto() {
        return getCryptoProvider();
    }
    static validateMode(m) {
        switch (m) {
            case Oprf.Mode.OPRF:
            case Oprf.Mode.VOPRF:
            case Oprf.Mode.POPRF:
                return m;
            default:
                assertNever('Oprf.Mode', m);
        }
    }
    static getGroup(suite, ...arg) {
        return getSuiteGroup(suite, arg);
    }
    static getHash(suite) {
        return getOprfParams(suite)[2];
    }
    static getOprfSize(suite) {
        return getOprfParams(suite)[3];
    }
    static getDST(mode, suite, name) {
        const m = Oprf.validateMode(mode);
        const te = new TextEncoder();
        return joinAll([
            te.encode(name + Oprf.LABELS.Version),
            Uint8Array.of(m),
            te.encode('-' + suite)
        ]);
    }
    constructor(mode, suite, ...arg) {
        const [ID, gid, hash] = getOprfParams(suite);
        this.crypto = getCrypto(arg);
        this.group = this.crypto.Group.get(gid);
        this.suite = ID;
        this.hashID = hash;
        this.mode = Oprf.validateMode(mode);
    }
    getDLEQParams() {
        const EMPTY_DST = '';
        return { group: this.group.id, hash: this.hashID, dst: this.getDST(EMPTY_DST) };
    }
    getDST(name) {
        return Oprf.getDST(this.mode, this.suite, name);
    }
    async coreFinalize(input, issuedElement, info) {
        let hasInfo = [];
        if (this.mode === Oprf.Mode.POPRF) {
            hasInfo = toU16LenPrefix(info);
        }
        const hashInput = joinAll([
            ...toU16LenPrefix(input),
            ...hasInfo,
            ...toU16LenPrefix(issuedElement),
            new TextEncoder().encode(Oprf.LABELS.FinalizeDST)
        ]);
        return await this.crypto.hash(this.hashID, hashInput);
    }
    scalarFromInfo(info) {
        if (info.length >= 1 << 16) {
            throw new Error('invalid info length');
        }
        const te = new TextEncoder();
        const framedInfo = joinAll([te.encode(Oprf.LABELS.InfoLabel), ...toU16LenPrefix(info)]);
        return this.group.hashToScalar(framedInfo, this.getDST(Oprf.LABELS.HashToScalarDST));
    }
}
Oprf.Mode = MODE;
Oprf.Suite = SUITE;
Oprf.LABELS = LABELS;
export class Evaluation {
    constructor(mode, evaluated, proof) {
        this.mode = mode;
        this.evaluated = evaluated;
        this.proof = proof;
    }
    serialize() {
        let proofBytes = new Uint8Array();
        if (this.proof && (this.mode == Oprf.Mode.VOPRF || this.mode == Oprf.Mode.POPRF)) {
            proofBytes = this.proof.serialize();
        }
        return joinAll([
            ...toU16LenPrefixClass(this.evaluated),
            Uint8Array.from([this.mode]),
            proofBytes
        ]);
    }
    isEqual(e) {
        if (this.mode !== e.mode || (this.proof && !e.proof) || (!this.proof && e.proof)) {
            return false;
        }
        let res = this.evaluated.every((x, i) => x.isEqual(e.evaluated[i]));
        if (this.proof && e.proof) {
            res && (res = this.proof.isEqual(e.proof));
        }
        return res;
    }
    static deserialize(suite, bytes, ...arg) {
        const group = getSuiteGroup(suite, arg);
        const { head: evalList, tail } = fromU16LenPrefixDes(group.eltDes, bytes);
        let proof;
        const proofSize = DLEQProof.size(group);
        const proofBytes = tail.subarray(1, 1 + proofSize);
        const mode = tail[0];
        switch (mode) {
            case Oprf.Mode.OPRF: // no proof exists.
                break;
            case Oprf.Mode.VOPRF:
            case Oprf.Mode.POPRF:
                proof = DLEQProof.deserialize(group.id, proofBytes, ...arg);
                break;
            default:
                assertNever('Oprf.Mode', mode);
        }
        return new Evaluation(mode, evalList, proof);
    }
}
export class EvaluationRequest {
    constructor(blinded) {
        this.blinded = blinded;
    }
    serialize() {
        return joinAll(toU16LenPrefixClass(this.blinded));
    }
    isEqual(e) {
        return this.blinded.every((x, i) => x.isEqual(e.blinded[i]));
    }
    static deserialize(suite, bytes, ...arg) {
        const g = getSuiteGroup(suite, arg);
        const { head: blindedList } = fromU16LenPrefixDes(g.eltDes, bytes);
        return new EvaluationRequest(blindedList);
    }
}
export class FinalizeData {
    constructor(inputs, blinds, evalReq) {
        this.inputs = inputs;
        this.blinds = blinds;
        this.evalReq = evalReq;
    }
    serialize() {
        return joinAll([
            ...toU16LenPrefixUint8Array(this.inputs),
            ...toU16LenPrefixClass(this.blinds),
            this.evalReq.serialize()
        ]);
    }
    isEqual(f) {
        return (this.inputs.every((x, i) => x.toString() === f.inputs[i].toString()) &&
            this.blinds.every((x, i) => x.isEqual(f.blinds[i])) &&
            this.evalReq.isEqual(f.evalReq));
    }
    static deserialize(suite, bytes, ...arg) {
        const g = getSuiteGroup(suite, arg);
        const { head: inputs, tail: t0 } = fromU16LenPrefixUint8Array(bytes);
        const { head: blinds, tail: t1 } = fromU16LenPrefixDes(g.scalarDes, t0);
        const evalReq = EvaluationRequest.deserialize(suite, t1, ...arg);
        return new FinalizeData(inputs, blinds, evalReq);
    }
}
//# sourceMappingURL=oprf.js.map