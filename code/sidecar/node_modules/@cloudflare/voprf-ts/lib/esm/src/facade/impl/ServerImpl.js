import { OPRFServer, VOPRFServer, POPRFServer } from '../../server.js';
import { MODE } from '../../consts.js';
import { OprfBaseImpl } from './OprfBaseImpl.js';
export class ServerImpl extends OprfBaseImpl {
    constructor(privateKey, ...args) {
        super(...args);
        let wrapped;
        switch (this.mode) {
            case MODE.OPRF:
                wrapped = new OPRFServer(this.suite, privateKey, this.crypto);
                break;
            case MODE.POPRF:
                wrapped = new POPRFServer(this.suite, privateKey, this.crypto);
                break;
            case MODE.VOPRF:
                wrapped = new VOPRFServer(this.suite, privateKey, this.crypto);
                break;
            default:
                throw new Error(`Unsupported mode: ${this.mode}`);
        }
        this.spyHandle = {
            dleqProver: wrapped['prover']
        };
        this.verifyFinalize = wrapped.verifyFinalize.bind(wrapped);
        this.blindEvaluate = async (req, ...info) => {
            const internal = await wrapped.blindEvaluate(this.codec.decodeEvaluationRequest(req), ...info);
            return this.codec.encodeEvaluation(internal);
        };
    }
}
//# sourceMappingURL=ServerImpl.js.map