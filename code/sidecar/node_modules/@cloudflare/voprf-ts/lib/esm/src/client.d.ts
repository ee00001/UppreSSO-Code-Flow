import type { Scalar } from './groupTypes.js';
import type { Evaluation, SuiteID } from './oprf.js';
import { EvaluationRequest, FinalizeData, Oprf } from './oprf.js';
import type { CryptoProviderArg } from './cryptoImpl.js';
declare class baseClient extends Oprf {
    randomBlinder(): Promise<Scalar>;
    blind(inputs: Uint8Array[]): Promise<[FinalizeData, EvaluationRequest]>;
    doFinalize(finData: FinalizeData, evaluation: Evaluation, info?: Uint8Array): Promise<Uint8Array[]>;
}
export declare class OPRFClient extends baseClient {
    constructor(suite: SuiteID, ...arg: CryptoProviderArg);
    finalize(finData: FinalizeData, evaluation: Evaluation): Promise<Array<Uint8Array>>;
}
export declare class VOPRFClient extends baseClient {
    private readonly pubKeyServer;
    constructor(suite: SuiteID, pubKeyServer: Uint8Array, ...arg: CryptoProviderArg);
    finalize(finData: FinalizeData, evaluation: Evaluation): Promise<Array<Uint8Array>>;
}
export declare class POPRFClient extends baseClient {
    private readonly pubKeyServer;
    constructor(suite: SuiteID, pubKeyServer: Uint8Array, ...arg: CryptoProviderArg);
    private pointFromInfo;
    finalize(finData: FinalizeData, evaluation: Evaluation, info?: Uint8Array): Promise<Array<Uint8Array>>;
}
export {};
//# sourceMappingURL=client.d.ts.map