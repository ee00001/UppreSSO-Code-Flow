import type { Deserializer, Group, GroupID } from './groupTypes.js';
export declare function joinAll(a: Uint8Array[]): Uint8Array;
export declare function xor(a: Uint8Array, b: Uint8Array): Uint8Array;
export declare function ctEqual(a: Uint8Array, b: Uint8Array): boolean;
export declare function zip<T>(x: T[], y: T[]): Array<[T, T]>;
export declare function to16bits(n: number): Uint8Array;
export declare function toU16LenPrefix(b: Uint8Array): Uint8Array[];
export declare function toU16LenPrefixUint8Array(b: Uint8Array[]): Uint8Array[];
export declare function toU16LenPrefixClass(b: {
    serialize(): Uint8Array;
}[]): Uint8Array[];
export declare function fromU16LenPrefix(b: Uint8Array): {
    head: Uint8Array;
    tail: Uint8Array;
};
export declare function fromU16LenPrefixDes<T>(c: Deserializer<T>, b: Uint8Array): {
    head: T[];
    tail: Uint8Array;
};
export declare function fromU16LenPrefixUint8Array(b: Uint8Array): {
    head: Uint8Array[];
    tail: Uint8Array;
};
export declare function checkSize<U>(x: Uint8Array, T: {
    name: string;
    size: (x: U) => number;
}, u: U): void | never;
export declare function errDeserialization(T: {
    name: string;
}): Error;
export declare function errGroup(X: GroupID, Y: GroupID): Error;
export declare function compat(x: {
    g: Group;
}, y: {
    g: Group;
}): void | never;
//# sourceMappingURL=util.d.ts.map