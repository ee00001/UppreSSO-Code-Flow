// Copyright (c) 2021 Cloudflare, Inc. and contributors.
// Copyright (c) 2021 Cloudflare, Inc.
// Licensed under the BSD-3-Clause license found in the LICENSE file or
// at https://opensource.org/licenses/BSD-3-Clause
import { Oprf } from './oprf.js';
import { joinAll, toU16LenPrefix } from './util.js';
import { getSuiteGroup } from './cryptoImpl.js';
export function getKeySizes(id, ...arg) {
    const gg = getSuiteGroup(id, arg);
    return { Nsk: gg.scalarSize(), Npk: gg.eltSize(true) };
}
export function validatePrivateKey(id, privateKey, ...arg) {
    try {
        const gg = getSuiteGroup(id, arg);
        const s = gg.desScalar(privateKey);
        return !s.isZero();
    }
    catch (_) {
        return false;
    }
}
export function validatePublicKey(id, publicKey, ...arg) {
    try {
        const gg = getSuiteGroup(id, arg);
        const P = gg.desElt(publicKey);
        return !P.isIdentity();
    }
    catch (_) {
        return false;
    }
}
export async function randomPrivateKey(id, ...arg) {
    let priv;
    do {
        const gg = getSuiteGroup(id, arg);
        priv = await gg.randomScalar();
    } while (priv.isZero());
    return priv.serialize();
}
export async function derivePrivateKey(mode, id, seed, info, ...arg) {
    const gg = getSuiteGroup(id, arg);
    const deriveInput = joinAll([seed, ...toU16LenPrefix(info)]);
    let counter = 0;
    let priv;
    do {
        if (counter > 255) {
            throw new Error('DeriveKeyPairError');
        }
        const hashInput = joinAll([deriveInput, Uint8Array.from([counter])]);
        priv = await gg.hashToScalar(hashInput, Oprf.getDST(mode, id, Oprf.LABELS.DeriveKeyPairDST));
        counter++;
    } while (priv.isZero());
    return priv.serialize();
}
export function generatePublicKey(id, privateKey, ...arg) {
    const gg = getSuiteGroup(id, arg);
    const priv = gg.desScalar(privateKey);
    const pub = gg.mulGen(priv);
    return pub.serialize(true);
}
export async function generateKeyPair(id, ...arg) {
    const privateKey = await randomPrivateKey(id, ...arg);
    const publicKey = generatePublicKey(id, privateKey, ...arg);
    return { privateKey, publicKey };
}
export async function deriveKeyPair(mode, id, seed, info, ...arg) {
    const privateKey = await derivePrivateKey(mode, id, seed, info, ...arg);
    const publicKey = generatePublicKey(id, privateKey, ...arg);
    return { privateKey, publicKey };
}
//# sourceMappingURL=keys.js.map