import type { BaseEvaluation as FacadeEvaluationBase, VerifiableEvaluation as FacadeVerifiableEvaluation, Serialized, EvaluationRequest as FacadeEvaluationRequest, HasSerialize } from '../types.js';
import type { Group, Elt, Scalar } from '../../groupTypes.js';
import type { CryptoProvider } from '../../cryptoTypes.js';
import { DLEQProof } from '../../dleq.js';
import { Evaluation, EvaluationRequest } from '../../oprf.js';
export type FacadeEvaluation = FacadeEvaluationBase & Partial<FacadeVerifiableEvaluation>;
export declare class Codec {
    private group;
    private crypto;
    constructor(group: Group, crypto: CryptoProvider);
    decodeElts(evaluated: Array<Serialized<Elt>>): Elt[];
    decodeScalars(evaluated: Array<Serialized<Scalar>>): Scalar[];
    encodeArray(array: HasSerialize<Uint8Array>[]): Uint8Array[];
    decodeProof(proof: Uint8Array): DLEQProof;
    encodeEvaluation(lib: Evaluation): FacadeEvaluation;
    encodeEvaluationRequest(evalRequest: EvaluationRequest): FacadeEvaluationRequest;
    decodeEvaluation(fac: FacadeEvaluation): Evaluation;
    decodeEvaluationRequest(fac: FacadeEvaluationRequest): EvaluationRequest;
}
//# sourceMappingURL=Codec.d.ts.map