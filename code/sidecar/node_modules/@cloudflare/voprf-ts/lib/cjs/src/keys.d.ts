import { type ModeID, type SuiteID } from './oprf.js';
import { type CryptoProviderArg } from './cryptoImpl.js';
export declare function getKeySizes(id: SuiteID, ...arg: CryptoProviderArg): {
    Nsk: number;
    Npk: number;
};
export declare function validatePrivateKey(id: SuiteID, privateKey: Uint8Array, ...arg: CryptoProviderArg): boolean;
export declare function validatePublicKey(id: SuiteID, publicKey: Uint8Array, ...arg: CryptoProviderArg): boolean;
export declare function randomPrivateKey(id: SuiteID, ...arg: CryptoProviderArg): Promise<Uint8Array>;
export declare function derivePrivateKey(mode: ModeID, id: SuiteID, seed: Uint8Array, info: Uint8Array, ...arg: CryptoProviderArg): Promise<Uint8Array>;
export declare function generatePublicKey(id: SuiteID, privateKey: Uint8Array, ...arg: CryptoProviderArg): Uint8Array;
export declare function generateKeyPair(id: SuiteID, ...arg: CryptoProviderArg): Promise<{
    privateKey: Uint8Array;
    publicKey: Uint8Array;
}>;
export declare function deriveKeyPair(mode: ModeID, id: SuiteID, seed: Uint8Array, info: Uint8Array, ...arg: CryptoProviderArg): Promise<{
    privateKey: Uint8Array;
    publicKey: Uint8Array;
}>;
//# sourceMappingURL=keys.d.ts.map