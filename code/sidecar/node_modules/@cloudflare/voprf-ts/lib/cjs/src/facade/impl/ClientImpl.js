"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientImpl = void 0;
const client_js_1 = require("../../client.js");
const consts_js_1 = require("../../consts.js");
const OprfBaseImpl_js_1 = require("./OprfBaseImpl.js");
const oprf_js_1 = require("../../oprf.js");
class ClientImpl extends OprfBaseImpl_js_1.OprfBaseImpl {
    constructor(publicKey, ...args) {
        super(...args);
        let wrapped;
        switch (this.mode) {
            case consts_js_1.MODE.OPRF:
                wrapped = new client_js_1.OPRFClient(this.suite, this.crypto);
                break;
            case consts_js_1.MODE.POPRF:
                if (!publicKey) {
                    throw new Error(`public key must be set for the POPRF mode`);
                }
                wrapped = new client_js_1.POPRFClient(this.suite, publicKey, this.crypto);
                break;
            case consts_js_1.MODE.VOPRF:
                if (!publicKey) {
                    throw new Error(`public key must be set for the VOPRF mode`);
                }
                wrapped = new client_js_1.VOPRFClient(this.suite, publicKey, this.crypto);
                break;
            default:
                throw new Error(`Unsupported mode: ${this.mode}`);
        }
        this.blind = async (inputs) => {
            const [finData, evalReq] = await wrapped.blind(inputs);
            return [finData, this.codec.encodeEvaluationRequest(evalReq)];
        };
        this.finalize = (finData, evaluation, ...info) => {
            return wrapped.finalize(this.mapFinalizationData(finData), this.codec.decodeEvaluation({ mode: this.mode, ...evaluation }), ...info);
        };
        this.spyHandle = { blinds: wrapped };
    }
    mapFinalizationData(fac) {
        if (fac instanceof oprf_js_1.FinalizeData) {
            return fac;
        }
        return new oprf_js_1.FinalizeData(fac.inputs, fac.blinds, new oprf_js_1.EvaluationRequest(fac.evalReq.blinded));
    }
}
exports.ClientImpl = ClientImpl;
//# sourceMappingURL=ClientImpl.js.map