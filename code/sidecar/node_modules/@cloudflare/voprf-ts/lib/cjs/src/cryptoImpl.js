"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCrypto = getCrypto;
exports.getGroup = getGroup;
exports.getSuiteGroup = getSuiteGroup;
exports.setCryptoProvider = setCryptoProvider;
exports.getCryptoProvider = getCryptoProvider;
const oprf_js_1 = require("./oprf.js");
const buildSettings_js_1 = require("./buildSettings.js");
const REQUIRED = buildSettings_js_1.CRYPTO_PROVIDER_ARG_REQUIRED;
let configured = buildSettings_js_1.DEFAULT_CRYPTO_PROVIDER;
function getCrypto(arg) {
    const [provider] = arg;
    if (!provider && REQUIRED) {
        throw new Error(`Undefined crypto arg`);
    }
    return provider ?? configured;
}
function getGroup(groupID, arg) {
    const provider = getCrypto(arg);
    return provider.Group.get(groupID);
}
function getSuiteGroup(suite, arg) {
    return getGroup((0, oprf_js_1.getOprfParams)(suite)[1], arg);
}
// This way the `old` api can be used
function setCryptoProvider(provider) {
    configured = provider;
}
function getCryptoProvider() {
    return configured;
}
//# sourceMappingURL=cryptoImpl.js.map