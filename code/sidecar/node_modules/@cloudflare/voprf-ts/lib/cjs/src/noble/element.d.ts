import type { Elt } from '../groupTypes.js';
import type { PointConstructor } from './types.js';
import type { GroupNb } from './group.js';
import type { ScalarNb } from './scalar.js';
export declare class EltNb implements Elt {
    readonly g: GroupNb;
    private readonly p;
    Point: PointConstructor;
    private constructor();
    static create(g: GroupNb): EltNb;
    static gen(g: GroupNb): EltNb;
    isIdentity(): boolean;
    isEqual(a: EltNb): boolean;
    neg(): EltNb;
    add(a: EltNb): EltNb;
    mul(s: ScalarNb): EltNb;
    mul2(k1: ScalarNb, a: EltNb, k2: ScalarNb): EltNb;
    serialize(compressed?: boolean): Uint8Array;
    static size(g: GroupNb, compressed?: boolean): number;
    private static deser;
    static deserialize(g: GroupNb, bytes: Uint8Array): EltNb;
    static hash(g: GroupNb, msg: Uint8Array, dst: Uint8Array): EltNb;
}
//# sourceMappingURL=element.d.ts.map