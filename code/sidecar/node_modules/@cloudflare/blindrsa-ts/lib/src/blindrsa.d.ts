export declare enum PrepareType {
    Deterministic = 0,
    Randomized = 32
}
export type BlindOutput = {
    blindedMsg: Uint8Array;
    inv: Uint8Array;
};
export interface BlindRSAParams {
    name: string;
    hash: string;
    saltLength: number;
    prepareType: PrepareType;
}
export interface BlindRSAPlatformParams {
    supportsRSARAW: boolean;
}
export declare class BlindRSA {
    readonly params: BlindRSAParams & BlindRSAPlatformParams;
    private static readonly NAME;
    constructor(params: BlindRSAParams & BlindRSAPlatformParams);
    toString(): string;
    prepare(msg: Uint8Array): Uint8Array;
    private extractKeyParams;
    blind(publicKey: CryptoKey, msg: Uint8Array): Promise<BlindOutput>;
    blindSign(privateKey: CryptoKey, blindMsg: Uint8Array): Promise<Uint8Array>;
    finalize(publicKey: CryptoKey, msg: Uint8Array, blindSig: Uint8Array, inv: Uint8Array): Promise<Uint8Array>;
    static generateKey(algorithm: Pick<RsaHashedKeyGenParams, 'modulusLength' | 'publicExponent' | 'hash'>): Promise<CryptoKeyPair>;
    generateKey(algorithm: Pick<RsaHashedKeyGenParams, 'modulusLength' | 'publicExponent'>): Promise<CryptoKeyPair>;
    verify(publicKey: CryptoKey, signature: Uint8Array, message: Uint8Array): Promise<boolean>;
}
//# sourceMappingURL=blindrsa.d.ts.map