import sjcl from './sjcl/index.js';
import { type BlindRSAParams, type BlindRSAPlatformParams } from './blindrsa.js';
export type BlindOutput = {
    blindedMsg: Uint8Array;
    inv: Uint8Array;
};
export type PartiallyBlindRSAParams = BlindRSAParams;
export type PartiallyBlindRSAPlatformParams = BlindRSAPlatformParams;
export declare class PartiallyBlindRSA {
    readonly params: PartiallyBlindRSAParams & PartiallyBlindRSAPlatformParams;
    private static readonly NAME;
    constructor(params: PartiallyBlindRSAParams & PartiallyBlindRSAPlatformParams);
    toString(): string;
    prepare(msg: Uint8Array): Uint8Array;
    private extractKeyParams;
    blind(publicKey: CryptoKey, msg: Uint8Array, info: Uint8Array): Promise<BlindOutput>;
    blindSign(privateKey: CryptoKey, blindMsg: Uint8Array, info: Uint8Array): Promise<Uint8Array>;
    finalize(publicKey: CryptoKey, msg: Uint8Array, info: Uint8Array, blindSig: Uint8Array, inv: Uint8Array): Promise<Uint8Array>;
    static generateKey(algorithm: Pick<RsaHashedKeyGenParams, 'modulusLength' | 'publicExponent' | 'hash'>, generateSafePrimeSync?: (length: number) => sjcl.BigNumber | bigint): Promise<CryptoKeyPair>;
    generateKey(algorithm: Pick<RsaHashedKeyGenParams, 'modulusLength' | 'publicExponent'>, generateSafePrimeSync?: (length: number) => sjcl.BigNumber | bigint): Promise<CryptoKeyPair>;
    verify(publicKey: CryptoKey, signature: Uint8Array, message: Uint8Array, info: Uint8Array): Promise<boolean>;
    private derivePublicKey;
    private deriveKeyPair;
    private static bigKeyPairToCryptoKeyPair;
}
//# sourceMappingURL=partially_blindrsa.d.ts.map