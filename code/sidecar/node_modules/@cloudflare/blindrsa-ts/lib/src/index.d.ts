import { BlindRSA, type BlindRSAParams, type BlindRSAPlatformParams } from './blindrsa.js';
import { PartiallyBlindRSA, type PartiallyBlindRSAPlatformParams } from './partially_blindrsa.js';
export { BlindRSA, PartiallyBlindRSA, type BlindRSAParams, type BlindRSAPlatformParams };
export declare const Params: Record<string, BlindRSAParams>;
export declare const RSABSSA: {
    readonly SHA384: {
        readonly generateKey: (algorithm: Pick<RsaHashedKeyGenParams, "modulusLength" | "publicExponent">) => Promise<CryptoKeyPair>;
        readonly PSS: {
            readonly Randomized: (params?: BlindRSAPlatformParams) => BlindRSA;
            readonly Deterministic: (params?: BlindRSAPlatformParams) => BlindRSA;
        };
        readonly PSSZero: {
            readonly Randomized: (params?: BlindRSAPlatformParams) => BlindRSA;
            readonly Deterministic: (params?: BlindRSAPlatformParams) => BlindRSA;
        };
    };
};
export declare const RSAPBSSA: {
    readonly SHA384: {
        readonly generateKey: (algorithm: Pick<RsaHashedKeyGenParams, "modulusLength" | "publicExponent">) => Promise<CryptoKeyPair>;
        readonly PSS: {
            readonly Randomized: (params?: PartiallyBlindRSAPlatformParams) => PartiallyBlindRSA;
            readonly Deterministic: (params?: PartiallyBlindRSAPlatformParams) => PartiallyBlindRSA;
        };
        readonly PSSZero: {
            readonly Randomized: (params?: PartiallyBlindRSAPlatformParams) => PartiallyBlindRSA;
            readonly Deterministic: (params?: PartiallyBlindRSAPlatformParams) => PartiallyBlindRSA;
        };
    };
};
export declare function getSuiteByName<T>(newT: {
    new (params: BlindRSAParams & BlindRSAPlatformParams): T;
}, name: string, params?: BlindRSAPlatformParams): T;
//# sourceMappingURL=index.d.ts.map